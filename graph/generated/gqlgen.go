// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	models1 "github.com/taktakty/netlabi/models"
	models "github.com/taktakty/netlabi/models/generated"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Device() DeviceResolver
	DeviceModel() DeviceModelResolver
	Host() HostResolver
	HostOS() HostOSResolver
	IpSegment() IpSegmentResolver
	Ipaddr() IpaddrResolver
	Mutation() MutationResolver
	Port() PortResolver
	Query() QueryResolver
	Rack() RackResolver
	SegmentUse() SegmentUseResolver
	Site() SiteResolver
	Vrf() VrfResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Device struct {
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeviceModel func(childComplexity int) int
		Host        func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Note        func(childComplexity int) int
		Ports       func(childComplexity int) int
		Position    func(childComplexity int) int
		Rack        func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	DeviceModel struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Devices   func(childComplexity int) int
		Height    func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Width     func(childComplexity int) int
	}

	Host struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Devices   func(childComplexity int) int
		HostOs    func(childComplexity int) int
		ID        func(childComplexity int) int
		MgmtIP    func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		Protocol  func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	HostOs struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Hosts     func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	IPSegment struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IPSegment func(childComplexity int) int
		Ipaddrs   func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Use       func(childComplexity int) int
		Vrf       func(childComplexity int) int
	}

	Ipaddr struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Host      func(childComplexity int) int
		ID        func(childComplexity int) int
		IP        func(childComplexity int) int
		IPSegment func(childComplexity int) int
		Note      func(childComplexity int) int
		Status    func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Mutation struct {
		BulkCreatePort        func(childComplexity int, input models.BulkCreatePortInput) int
		BulkDeleteDevice      func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteDeviceModel func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteHost        func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteHostOs      func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteIPSegment   func(childComplexity int, input models.BulkIDInput) int
		BulkDeletePort        func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteRack        func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteSegmentUse  func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteSite        func(childComplexity int, input models.BulkIDInput) int
		BulkDeleteVrf         func(childComplexity int, input models.BulkIDInput) int
		BulkUpdateDevice      func(childComplexity int, input models.BulkUpdateDeviceInput) int
		CreateDevice          func(childComplexity int, input models.CreateDeviceInput) int
		CreateDeviceModel     func(childComplexity int, input models.CreateDeviceModelInput) int
		CreateHost            func(childComplexity int, input models.CreateHostInput) int
		CreateHostOs          func(childComplexity int, input models.CreateHostOSInput) int
		CreateIPSegment       func(childComplexity int, input models.CreateIPSegmentInput) int
		CreatePort            func(childComplexity int, input models.CreatePortInput) int
		CreateRack            func(childComplexity int, input models.CreateRackInput) int
		CreateSegmentUse      func(childComplexity int, input models.CreateSegmentUseInput) int
		CreateSite            func(childComplexity int, input models.CreateSiteInput) int
		CreateVrf             func(childComplexity int, input models.CreateVrfInput) int
		DeleteDevice          func(childComplexity int, input models.GetIDInput) int
		DeleteDeviceModel     func(childComplexity int, input models.GetIDInput) int
		DeleteHost            func(childComplexity int, input models.GetIDInput) int
		DeleteHostOs          func(childComplexity int, input models.GetIDInput) int
		DeleteIPSegment       func(childComplexity int, input models.GetIDInput) int
		DeletePort            func(childComplexity int, input models.GetIDInput) int
		DeleteRack            func(childComplexity int, input models.GetIDInput) int
		DeleteSegmentUse      func(childComplexity int, input models.GetIDInput) int
		DeleteSite            func(childComplexity int, input models.GetIDInput) int
		DeleteVrf             func(childComplexity int, input models.GetIDInput) int
		UpdateDevice          func(childComplexity int, input models.UpdateDeviceInput) int
		UpdateDeviceModel     func(childComplexity int, input models.UpdateDeviceModelInput) int
		UpdateHost            func(childComplexity int, input models.UpdateHostInput) int
		UpdateHostOs          func(childComplexity int, input models.UpdateHostOSInput) int
		UpdateIPSegment       func(childComplexity int, input models.UpdateIPSegmentInput) int
		UpdateIpaddr          func(childComplexity int, input models.UpdateIpaddrInput) int
		UpdatePort            func(childComplexity int, input models.UpdatePortInput) int
		UpdateRack            func(childComplexity int, input models.UpdateRackInput) int
		UpdateSegmentUse      func(childComplexity int, input models.UpdateSegmentUseInput) int
		UpdateSite            func(childComplexity int, input models.UpdateSiteInput) int
		UpdateVrf             func(childComplexity int, input models.UpdateVrfInput) int
	}

	Port struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Device    func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Query struct {
		GetDevice       func(childComplexity int, input models.GetIDInput) int
		GetDeviceModel  func(childComplexity int, input models.GetIDInput) int
		GetDeviceModels func(childComplexity int, input models.SearchDeviceModelInput) int
		GetDevices      func(childComplexity int, input models.SearchDeviceInput) int
		GetHost         func(childComplexity int, input models.GetIDInput) int
		GetHostOSes     func(childComplexity int, input models.SearchHostOSInput) int
		GetHostOs       func(childComplexity int, input models.GetIDInput) int
		GetHosts        func(childComplexity int, input models.SearchHostInput) int
		GetIPSegment    func(childComplexity int, input models.GetIDInput) int
		GetIPSegments   func(childComplexity int, input models.SearchIPSegmentInput) int
		GetIpaddr       func(childComplexity int, input models.GetIDInput) int
		GetIpaddrs      func(childComplexity int, input models.SearchIpaddrInput) int
		GetPort         func(childComplexity int, input models.GetIDInput) int
		GetPorts        func(childComplexity int, input models.SearchPortInput) int
		GetRack         func(childComplexity int, input models.GetIDInput) int
		GetRacks        func(childComplexity int, input models.SearchRackInput) int
		GetSegmentUse   func(childComplexity int, input models.GetIDInput) int
		GetSegmentUses  func(childComplexity int, input models.SearchSegmentUseInput) int
		GetSite         func(childComplexity int, input models.GetIDInput) int
		GetSites        func(childComplexity int, input models.SearchSiteInput) int
		GetVrf          func(childComplexity int, input models.GetIDInput) int
		GetVrfs         func(childComplexity int, input models.SearchVrfInput) int
	}

	Rack struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Devices   func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		Site      func(childComplexity int) int
		Status    func(childComplexity int) int
		Units     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	SegmentUse struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		IPSegments func(childComplexity int) int
		Name       func(childComplexity int) int
		Note       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	Site struct {
		Address     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Note        func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		PostalCode  func(childComplexity int) int
		Racks       func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Vrf struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		IPSegments func(childComplexity int) int
		Name       func(childComplexity int) int
		Note       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}
}

type DeviceResolver interface {
	Rack(ctx context.Context, obj *models1.Device) (*models1.Rack, error)
	DeviceModel(ctx context.Context, obj *models1.Device) (*models1.DeviceModel, error)
	Host(ctx context.Context, obj *models1.Device) (*models1.Host, error)
	Ports(ctx context.Context, obj *models1.Device) ([]*models1.Port, error)
}
type DeviceModelResolver interface {
	Devices(ctx context.Context, obj *models1.DeviceModel) ([]*models1.Device, error)
}
type HostResolver interface {
	Devices(ctx context.Context, obj *models1.Host) ([]*models1.Device, error)
	MgmtIP(ctx context.Context, obj *models1.Host) (*models1.Ipaddr, error)
	HostOs(ctx context.Context, obj *models1.Host) (*models1.HostOS, error)
}
type HostOSResolver interface {
	Hosts(ctx context.Context, obj *models1.HostOS) ([]*models1.Host, error)
}
type IpSegmentResolver interface {
	Vrf(ctx context.Context, obj *models1.IpSegment) (*models1.Vrf, error)
	Ipaddrs(ctx context.Context, obj *models1.IpSegment) ([]*models1.Ipaddr, error)
	Use(ctx context.Context, obj *models1.IpSegment) (*models1.SegmentUse, error)
}
type IpaddrResolver interface {
	Host(ctx context.Context, obj *models1.Ipaddr) (*models1.Host, error)
	IPSegment(ctx context.Context, obj *models1.Ipaddr) (*models1.IpSegment, error)
}
type MutationResolver interface {
	CreateSite(ctx context.Context, input models.CreateSiteInput) (*models1.Site, error)
	UpdateSite(ctx context.Context, input models.UpdateSiteInput) (*models1.Site, error)
	DeleteSite(ctx context.Context, input models.GetIDInput) (*models1.Site, error)
	BulkDeleteSite(ctx context.Context, input models.BulkIDInput) ([]*models1.Site, error)
	CreateRack(ctx context.Context, input models.CreateRackInput) (*models1.Rack, error)
	UpdateRack(ctx context.Context, input models.UpdateRackInput) (*models1.Rack, error)
	DeleteRack(ctx context.Context, input models.GetIDInput) (*models1.Rack, error)
	BulkDeleteRack(ctx context.Context, input models.BulkIDInput) ([]*models1.Rack, error)
	CreateDevice(ctx context.Context, input models.CreateDeviceInput) (*models1.Device, error)
	UpdateDevice(ctx context.Context, input models.UpdateDeviceInput) (*models1.Device, error)
	BulkUpdateDevice(ctx context.Context, input models.BulkUpdateDeviceInput) ([]*models1.Device, error)
	DeleteDevice(ctx context.Context, input models.GetIDInput) (*models1.Device, error)
	BulkDeleteDevice(ctx context.Context, input models.BulkIDInput) ([]*models1.Device, error)
	CreateDeviceModel(ctx context.Context, input models.CreateDeviceModelInput) (*models1.DeviceModel, error)
	UpdateDeviceModel(ctx context.Context, input models.UpdateDeviceModelInput) (*models1.DeviceModel, error)
	DeleteDeviceModel(ctx context.Context, input models.GetIDInput) (*models1.DeviceModel, error)
	BulkDeleteDeviceModel(ctx context.Context, input models.BulkIDInput) ([]*models1.DeviceModel, error)
	CreateHost(ctx context.Context, input models.CreateHostInput) (*models1.Host, error)
	UpdateHost(ctx context.Context, input models.UpdateHostInput) (*models1.Host, error)
	DeleteHost(ctx context.Context, input models.GetIDInput) (*models1.Host, error)
	BulkDeleteHost(ctx context.Context, input models.BulkIDInput) ([]*models1.Host, error)
	CreateHostOs(ctx context.Context, input models.CreateHostOSInput) (*models1.HostOS, error)
	UpdateHostOs(ctx context.Context, input models.UpdateHostOSInput) (*models1.HostOS, error)
	DeleteHostOs(ctx context.Context, input models.GetIDInput) (*models1.HostOS, error)
	BulkDeleteHostOs(ctx context.Context, input models.BulkIDInput) ([]*models1.HostOS, error)
	UpdateIpaddr(ctx context.Context, input models.UpdateIpaddrInput) (*models1.Ipaddr, error)
	CreateIPSegment(ctx context.Context, input models.CreateIPSegmentInput) (*models1.IpSegment, error)
	UpdateIPSegment(ctx context.Context, input models.UpdateIPSegmentInput) (*models1.IpSegment, error)
	DeleteIPSegment(ctx context.Context, input models.GetIDInput) (*models1.IpSegment, error)
	BulkDeleteIPSegment(ctx context.Context, input models.BulkIDInput) ([]*models1.IpSegment, error)
	CreateVrf(ctx context.Context, input models.CreateVrfInput) (*models1.Vrf, error)
	UpdateVrf(ctx context.Context, input models.UpdateVrfInput) (*models1.Vrf, error)
	DeleteVrf(ctx context.Context, input models.GetIDInput) (*models1.Vrf, error)
	BulkDeleteVrf(ctx context.Context, input models.BulkIDInput) ([]*models1.Vrf, error)
	CreateSegmentUse(ctx context.Context, input models.CreateSegmentUseInput) (*models1.SegmentUse, error)
	UpdateSegmentUse(ctx context.Context, input models.UpdateSegmentUseInput) (*models1.SegmentUse, error)
	DeleteSegmentUse(ctx context.Context, input models.GetIDInput) (*models1.SegmentUse, error)
	BulkDeleteSegmentUse(ctx context.Context, input models.BulkIDInput) ([]*models1.SegmentUse, error)
	CreatePort(ctx context.Context, input models.CreatePortInput) (*models1.Port, error)
	BulkCreatePort(ctx context.Context, input models.BulkCreatePortInput) ([]*models1.Port, error)
	UpdatePort(ctx context.Context, input models.UpdatePortInput) (*models1.Port, error)
	DeletePort(ctx context.Context, input models.GetIDInput) (*models1.Port, error)
	BulkDeletePort(ctx context.Context, input models.BulkIDInput) ([]*models1.Port, error)
}
type PortResolver interface {
	Device(ctx context.Context, obj *models1.Port) (*models1.Device, error)
}
type QueryResolver interface {
	GetSite(ctx context.Context, input models.GetIDInput) (*models1.Site, error)
	GetSites(ctx context.Context, input models.SearchSiteInput) ([]*models1.Site, error)
	GetRack(ctx context.Context, input models.GetIDInput) (*models1.Rack, error)
	GetRacks(ctx context.Context, input models.SearchRackInput) ([]*models1.Rack, error)
	GetDevice(ctx context.Context, input models.GetIDInput) (*models1.Device, error)
	GetDevices(ctx context.Context, input models.SearchDeviceInput) ([]*models1.Device, error)
	GetDeviceModel(ctx context.Context, input models.GetIDInput) (*models1.DeviceModel, error)
	GetDeviceModels(ctx context.Context, input models.SearchDeviceModelInput) ([]*models1.DeviceModel, error)
	GetHost(ctx context.Context, input models.GetIDInput) (*models1.Host, error)
	GetHosts(ctx context.Context, input models.SearchHostInput) ([]*models1.Host, error)
	GetHostOs(ctx context.Context, input models.GetIDInput) (*models1.HostOS, error)
	GetHostOSes(ctx context.Context, input models.SearchHostOSInput) ([]*models1.HostOS, error)
	GetIpaddr(ctx context.Context, input models.GetIDInput) (*models1.Ipaddr, error)
	GetIpaddrs(ctx context.Context, input models.SearchIpaddrInput) ([]*models1.Ipaddr, error)
	GetIPSegment(ctx context.Context, input models.GetIDInput) (*models1.IpSegment, error)
	GetIPSegments(ctx context.Context, input models.SearchIPSegmentInput) ([]*models1.IpSegment, error)
	GetVrf(ctx context.Context, input models.GetIDInput) (*models1.Vrf, error)
	GetVrfs(ctx context.Context, input models.SearchVrfInput) ([]*models1.Vrf, error)
	GetSegmentUse(ctx context.Context, input models.GetIDInput) (*models1.SegmentUse, error)
	GetSegmentUses(ctx context.Context, input models.SearchSegmentUseInput) ([]*models1.SegmentUse, error)
	GetPort(ctx context.Context, input models.GetIDInput) (*models1.Port, error)
	GetPorts(ctx context.Context, input models.SearchPortInput) ([]*models1.Port, error)
}
type RackResolver interface {
	Site(ctx context.Context, obj *models1.Rack) (*models1.Site, error)
	Devices(ctx context.Context, obj *models1.Rack) ([]*models1.Device, error)
}
type SegmentUseResolver interface {
	IPSegments(ctx context.Context, obj *models1.SegmentUse) ([]*models1.IpSegment, error)
}
type SiteResolver interface {
	Racks(ctx context.Context, obj *models1.Site) ([]*models1.Rack, error)
}
type VrfResolver interface {
	IPSegments(ctx context.Context, obj *models1.Vrf) ([]*models1.IpSegment, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Device.createdAt":
		if e.complexity.Device.CreatedAt == nil {
			break
		}

		return e.complexity.Device.CreatedAt(childComplexity), true

	case "Device.deletedAt":
		if e.complexity.Device.DeletedAt == nil {
			break
		}

		return e.complexity.Device.DeletedAt(childComplexity), true

	case "Device.deviceModel":
		if e.complexity.Device.DeviceModel == nil {
			break
		}

		return e.complexity.Device.DeviceModel(childComplexity), true

	case "Device.host":
		if e.complexity.Device.Host == nil {
			break
		}

		return e.complexity.Device.Host(childComplexity), true

	case "Device.id":
		if e.complexity.Device.ID == nil {
			break
		}

		return e.complexity.Device.ID(childComplexity), true

	case "Device.name":
		if e.complexity.Device.Name == nil {
			break
		}

		return e.complexity.Device.Name(childComplexity), true

	case "Device.note":
		if e.complexity.Device.Note == nil {
			break
		}

		return e.complexity.Device.Note(childComplexity), true

	case "Device.ports":
		if e.complexity.Device.Ports == nil {
			break
		}

		return e.complexity.Device.Ports(childComplexity), true

	case "Device.position":
		if e.complexity.Device.Position == nil {
			break
		}

		return e.complexity.Device.Position(childComplexity), true

	case "Device.rack":
		if e.complexity.Device.Rack == nil {
			break
		}

		return e.complexity.Device.Rack(childComplexity), true

	case "Device.status":
		if e.complexity.Device.Status == nil {
			break
		}

		return e.complexity.Device.Status(childComplexity), true

	case "Device.updatedAt":
		if e.complexity.Device.UpdatedAt == nil {
			break
		}

		return e.complexity.Device.UpdatedAt(childComplexity), true

	case "DeviceModel.createdAt":
		if e.complexity.DeviceModel.CreatedAt == nil {
			break
		}

		return e.complexity.DeviceModel.CreatedAt(childComplexity), true

	case "DeviceModel.deletedAt":
		if e.complexity.DeviceModel.DeletedAt == nil {
			break
		}

		return e.complexity.DeviceModel.DeletedAt(childComplexity), true

	case "DeviceModel.devices":
		if e.complexity.DeviceModel.Devices == nil {
			break
		}

		return e.complexity.DeviceModel.Devices(childComplexity), true

	case "DeviceModel.height":
		if e.complexity.DeviceModel.Height == nil {
			break
		}

		return e.complexity.DeviceModel.Height(childComplexity), true

	case "DeviceModel.id":
		if e.complexity.DeviceModel.ID == nil {
			break
		}

		return e.complexity.DeviceModel.ID(childComplexity), true

	case "DeviceModel.name":
		if e.complexity.DeviceModel.Name == nil {
			break
		}

		return e.complexity.DeviceModel.Name(childComplexity), true

	case "DeviceModel.note":
		if e.complexity.DeviceModel.Note == nil {
			break
		}

		return e.complexity.DeviceModel.Note(childComplexity), true

	case "DeviceModel.updatedAt":
		if e.complexity.DeviceModel.UpdatedAt == nil {
			break
		}

		return e.complexity.DeviceModel.UpdatedAt(childComplexity), true

	case "DeviceModel.width":
		if e.complexity.DeviceModel.Width == nil {
			break
		}

		return e.complexity.DeviceModel.Width(childComplexity), true

	case "Host.createdAt":
		if e.complexity.Host.CreatedAt == nil {
			break
		}

		return e.complexity.Host.CreatedAt(childComplexity), true

	case "Host.deletedAt":
		if e.complexity.Host.DeletedAt == nil {
			break
		}

		return e.complexity.Host.DeletedAt(childComplexity), true

	case "Host.devices":
		if e.complexity.Host.Devices == nil {
			break
		}

		return e.complexity.Host.Devices(childComplexity), true

	case "Host.hostOS":
		if e.complexity.Host.HostOs == nil {
			break
		}

		return e.complexity.Host.HostOs(childComplexity), true

	case "Host.id":
		if e.complexity.Host.ID == nil {
			break
		}

		return e.complexity.Host.ID(childComplexity), true

	case "Host.mgmtIp":
		if e.complexity.Host.MgmtIP == nil {
			break
		}

		return e.complexity.Host.MgmtIP(childComplexity), true

	case "Host.name":
		if e.complexity.Host.Name == nil {
			break
		}

		return e.complexity.Host.Name(childComplexity), true

	case "Host.note":
		if e.complexity.Host.Note == nil {
			break
		}

		return e.complexity.Host.Note(childComplexity), true

	case "Host.protocol":
		if e.complexity.Host.Protocol == nil {
			break
		}

		return e.complexity.Host.Protocol(childComplexity), true

	case "Host.status":
		if e.complexity.Host.Status == nil {
			break
		}

		return e.complexity.Host.Status(childComplexity), true

	case "Host.updatedAt":
		if e.complexity.Host.UpdatedAt == nil {
			break
		}

		return e.complexity.Host.UpdatedAt(childComplexity), true

	case "HostOS.createdAt":
		if e.complexity.HostOs.CreatedAt == nil {
			break
		}

		return e.complexity.HostOs.CreatedAt(childComplexity), true

	case "HostOS.deletedAt":
		if e.complexity.HostOs.DeletedAt == nil {
			break
		}

		return e.complexity.HostOs.DeletedAt(childComplexity), true

	case "HostOS.hosts":
		if e.complexity.HostOs.Hosts == nil {
			break
		}

		return e.complexity.HostOs.Hosts(childComplexity), true

	case "HostOS.id":
		if e.complexity.HostOs.ID == nil {
			break
		}

		return e.complexity.HostOs.ID(childComplexity), true

	case "HostOS.name":
		if e.complexity.HostOs.Name == nil {
			break
		}

		return e.complexity.HostOs.Name(childComplexity), true

	case "HostOS.note":
		if e.complexity.HostOs.Note == nil {
			break
		}

		return e.complexity.HostOs.Note(childComplexity), true

	case "HostOS.updatedAt":
		if e.complexity.HostOs.UpdatedAt == nil {
			break
		}

		return e.complexity.HostOs.UpdatedAt(childComplexity), true

	case "IpSegment.createdAt":
		if e.complexity.IPSegment.CreatedAt == nil {
			break
		}

		return e.complexity.IPSegment.CreatedAt(childComplexity), true

	case "IpSegment.deletedAt":
		if e.complexity.IPSegment.DeletedAt == nil {
			break
		}

		return e.complexity.IPSegment.DeletedAt(childComplexity), true

	case "IpSegment.id":
		if e.complexity.IPSegment.ID == nil {
			break
		}

		return e.complexity.IPSegment.ID(childComplexity), true

	case "IpSegment.ipSegment":
		if e.complexity.IPSegment.IPSegment == nil {
			break
		}

		return e.complexity.IPSegment.IPSegment(childComplexity), true

	case "IpSegment.ipaddrs":
		if e.complexity.IPSegment.Ipaddrs == nil {
			break
		}

		return e.complexity.IPSegment.Ipaddrs(childComplexity), true

	case "IpSegment.note":
		if e.complexity.IPSegment.Note == nil {
			break
		}

		return e.complexity.IPSegment.Note(childComplexity), true

	case "IpSegment.updatedAt":
		if e.complexity.IPSegment.UpdatedAt == nil {
			break
		}

		return e.complexity.IPSegment.UpdatedAt(childComplexity), true

	case "IpSegment.use":
		if e.complexity.IPSegment.Use == nil {
			break
		}

		return e.complexity.IPSegment.Use(childComplexity), true

	case "IpSegment.vrf":
		if e.complexity.IPSegment.Vrf == nil {
			break
		}

		return e.complexity.IPSegment.Vrf(childComplexity), true

	case "Ipaddr.createdAt":
		if e.complexity.Ipaddr.CreatedAt == nil {
			break
		}

		return e.complexity.Ipaddr.CreatedAt(childComplexity), true

	case "Ipaddr.deletedAt":
		if e.complexity.Ipaddr.DeletedAt == nil {
			break
		}

		return e.complexity.Ipaddr.DeletedAt(childComplexity), true

	case "Ipaddr.host":
		if e.complexity.Ipaddr.Host == nil {
			break
		}

		return e.complexity.Ipaddr.Host(childComplexity), true

	case "Ipaddr.id":
		if e.complexity.Ipaddr.ID == nil {
			break
		}

		return e.complexity.Ipaddr.ID(childComplexity), true

	case "Ipaddr.ip":
		if e.complexity.Ipaddr.IP == nil {
			break
		}

		return e.complexity.Ipaddr.IP(childComplexity), true

	case "Ipaddr.ipSegment":
		if e.complexity.Ipaddr.IPSegment == nil {
			break
		}

		return e.complexity.Ipaddr.IPSegment(childComplexity), true

	case "Ipaddr.note":
		if e.complexity.Ipaddr.Note == nil {
			break
		}

		return e.complexity.Ipaddr.Note(childComplexity), true

	case "Ipaddr.status":
		if e.complexity.Ipaddr.Status == nil {
			break
		}

		return e.complexity.Ipaddr.Status(childComplexity), true

	case "Ipaddr.type":
		if e.complexity.Ipaddr.Type == nil {
			break
		}

		return e.complexity.Ipaddr.Type(childComplexity), true

	case "Ipaddr.updatedAt":
		if e.complexity.Ipaddr.UpdatedAt == nil {
			break
		}

		return e.complexity.Ipaddr.UpdatedAt(childComplexity), true

	case "Mutation.bulkCreatePort":
		if e.complexity.Mutation.BulkCreatePort == nil {
			break
		}

		args, err := ec.field_Mutation_bulkCreatePort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkCreatePort(childComplexity, args["input"].(models.BulkCreatePortInput)), true

	case "Mutation.bulkDeleteDevice":
		if e.complexity.Mutation.BulkDeleteDevice == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteDevice(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteDeviceModel":
		if e.complexity.Mutation.BulkDeleteDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteDeviceModel(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteHost":
		if e.complexity.Mutation.BulkDeleteHost == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteHost(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteHostOS":
		if e.complexity.Mutation.BulkDeleteHostOs == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteHostOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteHostOs(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteIpSegment":
		if e.complexity.Mutation.BulkDeleteIPSegment == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteIpSegment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteIPSegment(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeletePort":
		if e.complexity.Mutation.BulkDeletePort == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeletePort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeletePort(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteRack":
		if e.complexity.Mutation.BulkDeleteRack == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteRack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteRack(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteSegmentUse":
		if e.complexity.Mutation.BulkDeleteSegmentUse == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteSegmentUse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteSegmentUse(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteSite":
		if e.complexity.Mutation.BulkDeleteSite == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteSite(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkDeleteVrf":
		if e.complexity.Mutation.BulkDeleteVrf == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteVrf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteVrf(childComplexity, args["input"].(models.BulkIDInput)), true

	case "Mutation.bulkUpdateDevice":
		if e.complexity.Mutation.BulkUpdateDevice == nil {
			break
		}

		args, err := ec.field_Mutation_bulkUpdateDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkUpdateDevice(childComplexity, args["input"].(models.BulkUpdateDeviceInput)), true

	case "Mutation.createDevice":
		if e.complexity.Mutation.CreateDevice == nil {
			break
		}

		args, err := ec.field_Mutation_createDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDevice(childComplexity, args["input"].(models.CreateDeviceInput)), true

	case "Mutation.createDeviceModel":
		if e.complexity.Mutation.CreateDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_createDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeviceModel(childComplexity, args["input"].(models.CreateDeviceModelInput)), true

	case "Mutation.createHost":
		if e.complexity.Mutation.CreateHost == nil {
			break
		}

		args, err := ec.field_Mutation_createHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHost(childComplexity, args["input"].(models.CreateHostInput)), true

	case "Mutation.createHostOS":
		if e.complexity.Mutation.CreateHostOs == nil {
			break
		}

		args, err := ec.field_Mutation_createHostOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHostOs(childComplexity, args["input"].(models.CreateHostOSInput)), true

	case "Mutation.createIpSegment":
		if e.complexity.Mutation.CreateIPSegment == nil {
			break
		}

		args, err := ec.field_Mutation_createIpSegment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIPSegment(childComplexity, args["input"].(models.CreateIPSegmentInput)), true

	case "Mutation.createPort":
		if e.complexity.Mutation.CreatePort == nil {
			break
		}

		args, err := ec.field_Mutation_createPort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePort(childComplexity, args["input"].(models.CreatePortInput)), true

	case "Mutation.createRack":
		if e.complexity.Mutation.CreateRack == nil {
			break
		}

		args, err := ec.field_Mutation_createRack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRack(childComplexity, args["input"].(models.CreateRackInput)), true

	case "Mutation.createSegmentUse":
		if e.complexity.Mutation.CreateSegmentUse == nil {
			break
		}

		args, err := ec.field_Mutation_createSegmentUse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSegmentUse(childComplexity, args["input"].(models.CreateSegmentUseInput)), true

	case "Mutation.createSite":
		if e.complexity.Mutation.CreateSite == nil {
			break
		}

		args, err := ec.field_Mutation_createSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSite(childComplexity, args["input"].(models.CreateSiteInput)), true

	case "Mutation.createVrf":
		if e.complexity.Mutation.CreateVrf == nil {
			break
		}

		args, err := ec.field_Mutation_createVrf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVrf(childComplexity, args["input"].(models.CreateVrfInput)), true

	case "Mutation.deleteDevice":
		if e.complexity.Mutation.DeleteDevice == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDevice(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteDeviceModel":
		if e.complexity.Mutation.DeleteDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeviceModel(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteHost":
		if e.complexity.Mutation.DeleteHost == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHost(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteHostOS":
		if e.complexity.Mutation.DeleteHostOs == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHostOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHostOs(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteIpSegment":
		if e.complexity.Mutation.DeleteIPSegment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIpSegment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIPSegment(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deletePort":
		if e.complexity.Mutation.DeletePort == nil {
			break
		}

		args, err := ec.field_Mutation_deletePort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePort(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteRack":
		if e.complexity.Mutation.DeleteRack == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRack(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteSegmentUse":
		if e.complexity.Mutation.DeleteSegmentUse == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSegmentUse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSegmentUse(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteSite":
		if e.complexity.Mutation.DeleteSite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSite(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.deleteVrf":
		if e.complexity.Mutation.DeleteVrf == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVrf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVrf(childComplexity, args["input"].(models.GetIDInput)), true

	case "Mutation.updateDevice":
		if e.complexity.Mutation.UpdateDevice == nil {
			break
		}

		args, err := ec.field_Mutation_updateDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDevice(childComplexity, args["input"].(models.UpdateDeviceInput)), true

	case "Mutation.updateDeviceModel":
		if e.complexity.Mutation.UpdateDeviceModel == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeviceModel(childComplexity, args["input"].(models.UpdateDeviceModelInput)), true

	case "Mutation.updateHost":
		if e.complexity.Mutation.UpdateHost == nil {
			break
		}

		args, err := ec.field_Mutation_updateHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHost(childComplexity, args["input"].(models.UpdateHostInput)), true

	case "Mutation.updateHostOS":
		if e.complexity.Mutation.UpdateHostOs == nil {
			break
		}

		args, err := ec.field_Mutation_updateHostOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHostOs(childComplexity, args["input"].(models.UpdateHostOSInput)), true

	case "Mutation.updateIpSegment":
		if e.complexity.Mutation.UpdateIPSegment == nil {
			break
		}

		args, err := ec.field_Mutation_updateIpSegment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIPSegment(childComplexity, args["input"].(models.UpdateIPSegmentInput)), true

	case "Mutation.updateIpaddr":
		if e.complexity.Mutation.UpdateIpaddr == nil {
			break
		}

		args, err := ec.field_Mutation_updateIpaddr_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIpaddr(childComplexity, args["input"].(models.UpdateIpaddrInput)), true

	case "Mutation.updatePort":
		if e.complexity.Mutation.UpdatePort == nil {
			break
		}

		args, err := ec.field_Mutation_updatePort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePort(childComplexity, args["input"].(models.UpdatePortInput)), true

	case "Mutation.updateRack":
		if e.complexity.Mutation.UpdateRack == nil {
			break
		}

		args, err := ec.field_Mutation_updateRack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRack(childComplexity, args["input"].(models.UpdateRackInput)), true

	case "Mutation.updateSegmentUse":
		if e.complexity.Mutation.UpdateSegmentUse == nil {
			break
		}

		args, err := ec.field_Mutation_updateSegmentUse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSegmentUse(childComplexity, args["input"].(models.UpdateSegmentUseInput)), true

	case "Mutation.updateSite":
		if e.complexity.Mutation.UpdateSite == nil {
			break
		}

		args, err := ec.field_Mutation_updateSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSite(childComplexity, args["input"].(models.UpdateSiteInput)), true

	case "Mutation.updateVrf":
		if e.complexity.Mutation.UpdateVrf == nil {
			break
		}

		args, err := ec.field_Mutation_updateVrf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVrf(childComplexity, args["input"].(models.UpdateVrfInput)), true

	case "Port.createdAt":
		if e.complexity.Port.CreatedAt == nil {
			break
		}

		return e.complexity.Port.CreatedAt(childComplexity), true

	case "Port.deletedAt":
		if e.complexity.Port.DeletedAt == nil {
			break
		}

		return e.complexity.Port.DeletedAt(childComplexity), true

	case "Port.device":
		if e.complexity.Port.Device == nil {
			break
		}

		return e.complexity.Port.Device(childComplexity), true

	case "Port.id":
		if e.complexity.Port.ID == nil {
			break
		}

		return e.complexity.Port.ID(childComplexity), true

	case "Port.name":
		if e.complexity.Port.Name == nil {
			break
		}

		return e.complexity.Port.Name(childComplexity), true

	case "Port.note":
		if e.complexity.Port.Note == nil {
			break
		}

		return e.complexity.Port.Note(childComplexity), true

	case "Port.status":
		if e.complexity.Port.Status == nil {
			break
		}

		return e.complexity.Port.Status(childComplexity), true

	case "Port.updatedAt":
		if e.complexity.Port.UpdatedAt == nil {
			break
		}

		return e.complexity.Port.UpdatedAt(childComplexity), true

	case "Query.getDevice":
		if e.complexity.Query.GetDevice == nil {
			break
		}

		args, err := ec.field_Query_getDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDevice(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getDeviceModel":
		if e.complexity.Query.GetDeviceModel == nil {
			break
		}

		args, err := ec.field_Query_getDeviceModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDeviceModel(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getDeviceModels":
		if e.complexity.Query.GetDeviceModels == nil {
			break
		}

		args, err := ec.field_Query_getDeviceModels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDeviceModels(childComplexity, args["input"].(models.SearchDeviceModelInput)), true

	case "Query.getDevices":
		if e.complexity.Query.GetDevices == nil {
			break
		}

		args, err := ec.field_Query_getDevices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDevices(childComplexity, args["input"].(models.SearchDeviceInput)), true

	case "Query.getHost":
		if e.complexity.Query.GetHost == nil {
			break
		}

		args, err := ec.field_Query_getHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHost(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getHostOSes":
		if e.complexity.Query.GetHostOSes == nil {
			break
		}

		args, err := ec.field_Query_getHostOSes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHostOSes(childComplexity, args["input"].(models.SearchHostOSInput)), true

	case "Query.getHostOS":
		if e.complexity.Query.GetHostOs == nil {
			break
		}

		args, err := ec.field_Query_getHostOS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHostOs(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getHosts":
		if e.complexity.Query.GetHosts == nil {
			break
		}

		args, err := ec.field_Query_getHosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHosts(childComplexity, args["input"].(models.SearchHostInput)), true

	case "Query.getIpSegment":
		if e.complexity.Query.GetIPSegment == nil {
			break
		}

		args, err := ec.field_Query_getIpSegment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIPSegment(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getIpSegments":
		if e.complexity.Query.GetIPSegments == nil {
			break
		}

		args, err := ec.field_Query_getIpSegments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIPSegments(childComplexity, args["input"].(models.SearchIPSegmentInput)), true

	case "Query.getIpaddr":
		if e.complexity.Query.GetIpaddr == nil {
			break
		}

		args, err := ec.field_Query_getIpaddr_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIpaddr(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getIpaddrs":
		if e.complexity.Query.GetIpaddrs == nil {
			break
		}

		args, err := ec.field_Query_getIpaddrs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIpaddrs(childComplexity, args["input"].(models.SearchIpaddrInput)), true

	case "Query.getPort":
		if e.complexity.Query.GetPort == nil {
			break
		}

		args, err := ec.field_Query_getPort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPort(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getPorts":
		if e.complexity.Query.GetPorts == nil {
			break
		}

		args, err := ec.field_Query_getPorts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPorts(childComplexity, args["input"].(models.SearchPortInput)), true

	case "Query.getRack":
		if e.complexity.Query.GetRack == nil {
			break
		}

		args, err := ec.field_Query_getRack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRack(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getRacks":
		if e.complexity.Query.GetRacks == nil {
			break
		}

		args, err := ec.field_Query_getRacks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRacks(childComplexity, args["input"].(models.SearchRackInput)), true

	case "Query.getSegmentUse":
		if e.complexity.Query.GetSegmentUse == nil {
			break
		}

		args, err := ec.field_Query_getSegmentUse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSegmentUse(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getSegmentUses":
		if e.complexity.Query.GetSegmentUses == nil {
			break
		}

		args, err := ec.field_Query_getSegmentUses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSegmentUses(childComplexity, args["input"].(models.SearchSegmentUseInput)), true

	case "Query.getSite":
		if e.complexity.Query.GetSite == nil {
			break
		}

		args, err := ec.field_Query_getSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSite(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getSites":
		if e.complexity.Query.GetSites == nil {
			break
		}

		args, err := ec.field_Query_getSites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSites(childComplexity, args["input"].(models.SearchSiteInput)), true

	case "Query.getVrf":
		if e.complexity.Query.GetVrf == nil {
			break
		}

		args, err := ec.field_Query_getVrf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVrf(childComplexity, args["input"].(models.GetIDInput)), true

	case "Query.getVrfs":
		if e.complexity.Query.GetVrfs == nil {
			break
		}

		args, err := ec.field_Query_getVrfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVrfs(childComplexity, args["input"].(models.SearchVrfInput)), true

	case "Rack.createdAt":
		if e.complexity.Rack.CreatedAt == nil {
			break
		}

		return e.complexity.Rack.CreatedAt(childComplexity), true

	case "Rack.deletedAt":
		if e.complexity.Rack.DeletedAt == nil {
			break
		}

		return e.complexity.Rack.DeletedAt(childComplexity), true

	case "Rack.devices":
		if e.complexity.Rack.Devices == nil {
			break
		}

		return e.complexity.Rack.Devices(childComplexity), true

	case "Rack.id":
		if e.complexity.Rack.ID == nil {
			break
		}

		return e.complexity.Rack.ID(childComplexity), true

	case "Rack.name":
		if e.complexity.Rack.Name == nil {
			break
		}

		return e.complexity.Rack.Name(childComplexity), true

	case "Rack.note":
		if e.complexity.Rack.Note == nil {
			break
		}

		return e.complexity.Rack.Note(childComplexity), true

	case "Rack.site":
		if e.complexity.Rack.Site == nil {
			break
		}

		return e.complexity.Rack.Site(childComplexity), true

	case "Rack.status":
		if e.complexity.Rack.Status == nil {
			break
		}

		return e.complexity.Rack.Status(childComplexity), true

	case "Rack.units":
		if e.complexity.Rack.Units == nil {
			break
		}

		return e.complexity.Rack.Units(childComplexity), true

	case "Rack.updatedAt":
		if e.complexity.Rack.UpdatedAt == nil {
			break
		}

		return e.complexity.Rack.UpdatedAt(childComplexity), true

	case "SegmentUse.createdAt":
		if e.complexity.SegmentUse.CreatedAt == nil {
			break
		}

		return e.complexity.SegmentUse.CreatedAt(childComplexity), true

	case "SegmentUse.deletedAt":
		if e.complexity.SegmentUse.DeletedAt == nil {
			break
		}

		return e.complexity.SegmentUse.DeletedAt(childComplexity), true

	case "SegmentUse.id":
		if e.complexity.SegmentUse.ID == nil {
			break
		}

		return e.complexity.SegmentUse.ID(childComplexity), true

	case "SegmentUse.ipSegments":
		if e.complexity.SegmentUse.IPSegments == nil {
			break
		}

		return e.complexity.SegmentUse.IPSegments(childComplexity), true

	case "SegmentUse.name":
		if e.complexity.SegmentUse.Name == nil {
			break
		}

		return e.complexity.SegmentUse.Name(childComplexity), true

	case "SegmentUse.note":
		if e.complexity.SegmentUse.Note == nil {
			break
		}

		return e.complexity.SegmentUse.Note(childComplexity), true

	case "SegmentUse.updatedAt":
		if e.complexity.SegmentUse.UpdatedAt == nil {
			break
		}

		return e.complexity.SegmentUse.UpdatedAt(childComplexity), true

	case "Site.address":
		if e.complexity.Site.Address == nil {
			break
		}

		return e.complexity.Site.Address(childComplexity), true

	case "Site.createdAt":
		if e.complexity.Site.CreatedAt == nil {
			break
		}

		return e.complexity.Site.CreatedAt(childComplexity), true

	case "Site.deletedAt":
		if e.complexity.Site.DeletedAt == nil {
			break
		}

		return e.complexity.Site.DeletedAt(childComplexity), true

	case "Site.id":
		if e.complexity.Site.ID == nil {
			break
		}

		return e.complexity.Site.ID(childComplexity), true

	case "Site.name":
		if e.complexity.Site.Name == nil {
			break
		}

		return e.complexity.Site.Name(childComplexity), true

	case "Site.note":
		if e.complexity.Site.Note == nil {
			break
		}

		return e.complexity.Site.Note(childComplexity), true

	case "Site.phoneNumber":
		if e.complexity.Site.PhoneNumber == nil {
			break
		}

		return e.complexity.Site.PhoneNumber(childComplexity), true

	case "Site.postalCode":
		if e.complexity.Site.PostalCode == nil {
			break
		}

		return e.complexity.Site.PostalCode(childComplexity), true

	case "Site.racks":
		if e.complexity.Site.Racks == nil {
			break
		}

		return e.complexity.Site.Racks(childComplexity), true

	case "Site.status":
		if e.complexity.Site.Status == nil {
			break
		}

		return e.complexity.Site.Status(childComplexity), true

	case "Site.updatedAt":
		if e.complexity.Site.UpdatedAt == nil {
			break
		}

		return e.complexity.Site.UpdatedAt(childComplexity), true

	case "Vrf.createdAt":
		if e.complexity.Vrf.CreatedAt == nil {
			break
		}

		return e.complexity.Vrf.CreatedAt(childComplexity), true

	case "Vrf.deletedAt":
		if e.complexity.Vrf.DeletedAt == nil {
			break
		}

		return e.complexity.Vrf.DeletedAt(childComplexity), true

	case "Vrf.id":
		if e.complexity.Vrf.ID == nil {
			break
		}

		return e.complexity.Vrf.ID(childComplexity), true

	case "Vrf.ipSegments":
		if e.complexity.Vrf.IPSegments == nil {
			break
		}

		return e.complexity.Vrf.IPSegments(childComplexity), true

	case "Vrf.name":
		if e.complexity.Vrf.Name == nil {
			break
		}

		return e.complexity.Vrf.Name(childComplexity), true

	case "Vrf.note":
		if e.complexity.Vrf.Note == nil {
			break
		}

		return e.complexity.Vrf.Note(childComplexity), true

	case "Vrf.updatedAt":
		if e.complexity.Vrf.UpdatedAt == nil {
			break
		}

		return e.complexity.Vrf.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "graph/common.graphql", Input: `input GetIdInput {
    id: ID!
}

input BulkIdInput {
    ids: [ID!]!
}

`},
	&ast.Source{Name: "graph/device.graphql", Input: `type Device {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  status: Int!
  position: Int
  rack: Rack
  deviceModel: DeviceModel!
  host: Host
  ports: [Port]
  note: String
}

input CreateDeviceInput {
  name: String!
  status: Int!
  position: Int
  rackId: ID
  deviceModelId: ID!
  hostId: ID
  note: String
}

input UpdateDeviceInput {
  id: ID!
  name: String
  status: Int
  position: Int
  rackId: ID
  deviceModelId: ID
  hostId: ID
  note: String
}

input BulkUpdateDeviceInput {
  devices: [UpdateDeviceInput]
}

input SearchDeviceInput {
  name: String
  status: Int
  siteId: ID
  rackId: ID
  deviceModelId: ID
  hostId: ID
  hostIdOr: ID
  hostIdIsNull: Boolean
  positionIsNull: Boolean
  rackIdOrNull: ID
}

type DeviceModel {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  height: Int!
  width: Int!
  devices: [Device]
  note: String
}

input CreateDeviceModelInput {
  name: String!
  height: Int!
  width: Int!
  note: String
}

input UpdateDeviceModelInput {
  id: ID!
  name: String
  height: Int
  width: Int
  note: String
}

input SearchDeviceModelInput {
  name: String
}

type Host {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  status: Int!
  devices: [Device]
  mgmtIp: Ipaddr
  hostOS: HostOS
  protocol: Int
  note: String
}

input CreateHostInput {
  name: String!
  status: Int!
  deviceIds: [ID]
  mgmtIpId: String
  hostOSId: String
  protocol: Int
  note: String
}

input UpdateHostInput {
  id: ID!
  name: String
  status: Int
  deviceIds: [ID]
  mgmtIpId: String
  hostOSId: String
  protocol: Int
  note: String
}

input SearchHostInput {
  name: String
  status: Int
  hostOSId: ID
  hostOSIdOr: ID
  hostOSIsNull: Boolean
  siteId: ID
  rackId: ID
}

type HostOS {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  hosts: [Host]
  note: String
}

input CreateHostOSInput {
  name: String!
  hostIds: [ID]
  note: String
}

input UpdateHostOSInput {
  id: ID!
  name: String
  hostIds: [ID]
  note: String
}

input SearchHostOSInput {
  name: String
}
`},
	&ast.Source{Name: "graph/ipaddr.graphql", Input: `type Ipaddr {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  ip: IP!
  status: Int!
  type: Int!
  host: Host
  ipSegment: IpSegment!
  note: String
}

input UpdateIpaddrInput {
  id: ID!
  status: Int
  type: Int
  note: String
}

input SearchIpaddrInput {
  ip: IP
  status: Int
  type: Int
  hostId: ID
  ipSegmentId: ID
}

type IpSegment {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  ipSegment: IPSeg!
  vrf: Vrf
  ipaddrs: [Ipaddr]
  use: SegmentUse
  note: String
}

input CreateIpSegmentInput {
  ipSegment: IPSeg!
  vrfId: ID
  useId: ID
  note: String
}

input UpdateIpSegmentInput {
  id: ID!
  vrfId: ID
  useId: ID
  note: String
}

input SearchIpSegmentInput {
  ipSegment: IPSeg
  vrfId: ID
  useId: ID
}

type Vrf {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  ipSegments: [IpSegment]
  note: String
}

input CreateVrfInput {
  name: String!
  note: String
}

input UpdateVrfInput {
  id: ID!
  name: String
  note: String
}

input SearchVrfInput {
  name: String
}

type SegmentUse {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  ipSegments: [IpSegment]
  note: String
}

input CreateSegmentUseInput {
  name: String!
  note: String
}

input UpdateSegmentUseInput {
  id: ID!
  name: String
  note: String
}

input SearchSegmentUseInput {
  name: String
}

`},
	&ast.Source{Name: "graph/mutation.graphql", Input: `type Mutation {
    createSite(input: CreateSiteInput!): Site!
    updateSite(input: UpdateSiteInput!): Site!
    deleteSite(input: GetIdInput!): Site!
    bulkDeleteSite(input: BulkIdInput!): [Site!]!
    createRack(input: CreateRackInput!): Rack!
    updateRack(input: UpdateRackInput!): Rack!
    deleteRack(input: GetIdInput!): Rack!
    bulkDeleteRack(input: BulkIdInput!): [Rack!]!
    createDevice(input: CreateDeviceInput!): Device!
    updateDevice(input: UpdateDeviceInput!): Device!
    bulkUpdateDevice(input: BulkUpdateDeviceInput!): [Device!]!
    deleteDevice(input: GetIdInput!): Device!
    bulkDeleteDevice(input: BulkIdInput!): [Device!]!
    createDeviceModel(input: CreateDeviceModelInput!): DeviceModel!
    updateDeviceModel(input: UpdateDeviceModelInput!): DeviceModel!
    deleteDeviceModel(input: GetIdInput!): DeviceModel!
    bulkDeleteDeviceModel(input: BulkIdInput!): [DeviceModel!]!
    createHost(input: CreateHostInput!): Host!
    updateHost(input: UpdateHostInput!): Host!
    deleteHost(input: GetIdInput!): Host!
    bulkDeleteHost(input: BulkIdInput!): [Host!]!
    createHostOS(input: CreateHostOSInput!): HostOS!
    updateHostOS(input: UpdateHostOSInput!): HostOS!
    deleteHostOS(input: GetIdInput!): HostOS!
    bulkDeleteHostOS(input: BulkIdInput!): [HostOS!]!
    updateIpaddr(input: UpdateIpaddrInput!): Ipaddr!
    createIpSegment(input: CreateIpSegmentInput!): IpSegment!
    updateIpSegment(input: UpdateIpSegmentInput!): IpSegment!
    deleteIpSegment(input: GetIdInput!): IpSegment!
    bulkDeleteIpSegment(input: BulkIdInput!): [IpSegment!]!
    createVrf(input: CreateVrfInput!): Vrf!
    updateVrf(input: UpdateVrfInput!): Vrf!
    deleteVrf(input: GetIdInput!): Vrf!
    bulkDeleteVrf(input: BulkIdInput!): [Vrf!]!
    createSegmentUse(input: CreateSegmentUseInput!): SegmentUse!
    updateSegmentUse(input: UpdateSegmentUseInput!): SegmentUse!
    deleteSegmentUse(input: GetIdInput!): SegmentUse!
    bulkDeleteSegmentUse(input: BulkIdInput!): [SegmentUse!]!
    createPort(input: CreatePortInput!): Port!
    bulkCreatePort(input: BulkCreatePortInput!): [Port!]!
    updatePort(input: UpdatePortInput!): Port!
    deletePort(input: GetIdInput!): Port!
    bulkDeletePort(input: BulkIdInput!): [Port!]!
}
`},
	&ast.Source{Name: "graph/port.graphql", Input: `type Port {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    name: String!
    status: Int!
    device: Device!
    note: String
}

input CreatePortInput {
    name: String!
    status: Int!
    deviceId: ID!
    note: String
}

input BulkCreatePortInput {
    prefix: String!
    startNum: Int!
    endNum: Int!
    status: Int!
    deviceId: ID!
}

input UpdatePortInput {
    id: ID!
    name: String
    status: Int
    deviceId: ID
    note: String
}

input SearchPortInput {
    id: ID
    name: String
    status: Int
    deviceId: ID
}
`},
	&ast.Source{Name: "graph/query.graphql", Input: `type Query {
    getSite(input: GetIdInput!): Site!
    getSites(input: SearchSiteInput!): [Site!]!
    getRack(input: GetIdInput!): Rack!
    getRacks(input: SearchRackInput!): [Rack!]!
    getDevice(input: GetIdInput!): Device!
    getDevices(input: SearchDeviceInput!): [Device!]!
    getDeviceModel(input: GetIdInput!): DeviceModel!
    getDeviceModels(input: SearchDeviceModelInput!): [DeviceModel!]!
    getHost(input: GetIdInput!): Host!
    getHosts(input: SearchHostInput!): [Host!]!
    getHostOS(input: GetIdInput!): HostOS!
    getHostOSes(input: SearchHostOSInput!): [HostOS!]!
    getIpaddr(input: GetIdInput!): Ipaddr!
    getIpaddrs(input: SearchIpaddrInput!): [Ipaddr!]!
    getIpSegment(input: GetIdInput!): IpSegment!
    getIpSegments(input: SearchIpSegmentInput!): [IpSegment!]!
    getVrf(input: GetIdInput!): Vrf!
    getVrfs(input: SearchVrfInput!): [Vrf!]!
    getSegmentUse(input: GetIdInput!): SegmentUse!
    getSegmentUses(input: SearchSegmentUseInput!): [SegmentUse!]!
    getPort(input: GetIdInput!): Port!
    getPorts(input: SearchPortInput!): [Port!]!
}
`},
	&ast.Source{Name: "graph/rack.graphql", Input: `type Rack {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  status: Int!
  site: Site
  devices: [Device]
  units: Int!
  note: String
}

input CreateRackInput {
  name: String!
  status: Int!
  siteId: ID
  units: Int!
  note: String
}

input UpdateRackInput {
  id: ID!
  name: String
  status: Int
  siteId: ID
  units: Int
  note: String
}

input SearchRackInput {
  name: String
  status: Int
  siteName: String
  siteId: String
}
`},
	&ast.Source{Name: "graph/scalars.graphql", Input: `scalar Time
scalar IP
scalar IPSeg
`},
	&ast.Source{Name: "graph/site.graphql", Input: `type Site {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  status: Int!
  postalCode: String
  phoneNumber: String
  address: String
  note: String
  racks: [Rack]
}

input CreateSiteInput {
  name: String!
  status: Int!
  postalCode: String
  phoneNumber: String
  address: String
  note: String
}

input UpdateSiteInput {
  id: ID!
  name: String
  status: Int
  postalCode: String
  phoneNumber: String
  address: String
  note: String
}

input SearchSiteInput {
  name: String
  status: Int
}`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_bulkCreatePort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkCreatePortInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkCreatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkCreatePortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteDeviceModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteHostOS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteIpSegment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeletePort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteRack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteSegmentUse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteVrf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkUpdateDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.BulkUpdateDeviceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBulkUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkUpdateDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeviceModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateDeviceModelInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateDeviceModelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateDeviceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHostOS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateHostOSInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateHostOSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateHostInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateHostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIpSegment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateIPSegmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateIPSegmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreatePortInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreatePortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateRackInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateRackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSegmentUse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateSegmentUseInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateSegmentUseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateSiteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateSiteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVrf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateVrfInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateVrfInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeviceModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHostOS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIpSegment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSegmentUse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVrf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeviceModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateDeviceModelInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceModelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateDeviceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHostOS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateHostOSInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateHostOSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateHostInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateHostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIpSegment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateIPSegmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateIPSegmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIpaddr_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateIpaddrInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIpaddrInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateIpaddrInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdatePortInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdatePortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateRackInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateRackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSegmentUse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateSegmentUseInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateSegmentUseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateSiteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateSiteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVrf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateVrfInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateVrfInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDeviceModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDeviceModels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchDeviceModelInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchDeviceModelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDevices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchDeviceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHostOS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHostOSes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchHostOSInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchHostOSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchHostInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchHostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIpSegment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIpSegments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchIPSegmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchIPSegmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIpaddr_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIpaddrs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchIpaddrInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchIpaddrInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchIpaddrInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPorts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchPortInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchPortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchPortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRacks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchRackInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchRackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSegmentUse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSegmentUses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchSegmentUseInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchSegmentUseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSites_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchSiteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchSiteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVrf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetIDInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVrfs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchVrfInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSearchVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchVrfInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Device_id(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_name(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_status(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_position(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_rack(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Device().Rack(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Rack)
	fc.Result = res
	return ec.marshalORack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_deviceModel(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Device().DeviceModel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_host(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Device().Host(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalOHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_ports(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Device().Ports(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Port)
	fc.Result = res
	return ec.marshalOPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_note(ctx context.Context, field graphql.CollectedField, obj *models1.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Device",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_id(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_name(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_height(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_width(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_devices(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeviceModel().Devices(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceModel_note(ctx context.Context, field graphql.CollectedField, obj *models1.DeviceModel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeviceModel",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_id(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_name(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_status(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_devices(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Host().Devices(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_mgmtIp(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Host().MgmtIP(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Ipaddr)
	fc.Result = res
	return ec.marshalOIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_hostOS(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Host().HostOs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.HostOS)
	fc.Result = res
	return ec.marshalOHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_protocol(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Host_note(ctx context.Context, field graphql.CollectedField, obj *models1.Host) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Host",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_id(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_name(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_hosts(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HostOS().Hosts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Host)
	fc.Result = res
	return ec.marshalOHost2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _HostOS_note(ctx context.Context, field graphql.CollectedField, obj *models1.HostOS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HostOS",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_id(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_ipSegment(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPSegment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.IPSeg)
	fc.Result = res
	return ec.marshalNIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_vrf(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IpSegment().Vrf(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Vrf)
	fc.Result = res
	return ec.marshalOVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_ipaddrs(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IpSegment().Ipaddrs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Ipaddr)
	fc.Result = res
	return ec.marshalOIpaddr2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_use(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IpSegment().Use(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.SegmentUse)
	fc.Result = res
	return ec.marshalOSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _IpSegment_note(ctx context.Context, field graphql.CollectedField, obj *models1.IpSegment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IpSegment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_id(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_ip(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.IP)
	fc.Result = res
	return ec.marshalNIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_status(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_type(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_host(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ipaddr().Host(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalOHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_ipSegment(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ipaddr().IPSegment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Ipaddr_note(ctx context.Context, field graphql.CollectedField, obj *models1.Ipaddr) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Ipaddr",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSite(rctx, args["input"].(models.CreateSiteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSite(rctx, args["input"].(models.UpdateSiteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSite(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteSite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteSite(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSiteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRack(rctx, args["input"].(models.CreateRackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRack(rctx, args["input"].(models.UpdateRackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRack(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteRack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteRack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteRack(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDevice(rctx, args["input"].(models.CreateDeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDevice(rctx, args["input"].(models.UpdateDeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkUpdateDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkUpdateDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkUpdateDevice(rctx, args["input"].(models.BulkUpdateDeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDevice(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteDevice(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDeviceModel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeviceModel(rctx, args["input"].(models.CreateDeviceModelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDeviceModel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeviceModel(rctx, args["input"].(models.UpdateDeviceModelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDeviceModel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeviceModel(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteDeviceModel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteDeviceModel(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHost(rctx, args["input"].(models.CreateHostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHost(rctx, args["input"].(models.UpdateHostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHost(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteHost(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createHostOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createHostOS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHostOs(rctx, args["input"].(models.CreateHostOSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateHostOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateHostOS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHostOs(rctx, args["input"].(models.UpdateHostOSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteHostOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteHostOS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHostOs(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteHostOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteHostOS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteHostOs(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOSᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIpaddr(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIpaddr_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIpaddr(rctx, args["input"].(models.UpdateIpaddrInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Ipaddr)
	fc.Result = res
	return ec.marshalNIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIpSegment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIpSegment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIPSegment(rctx, args["input"].(models.CreateIPSegmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIpSegment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIpSegment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIPSegment(rctx, args["input"].(models.UpdateIPSegmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIpSegment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIpSegment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIPSegment(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteIpSegment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteIpSegment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteIPSegment(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVrf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVrf_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVrf(rctx, args["input"].(models.CreateVrfInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVrf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVrf_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVrf(rctx, args["input"].(models.UpdateVrfInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVrf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVrf_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVrf(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteVrf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteVrf_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteVrf(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrfᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSegmentUse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSegmentUse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSegmentUse(rctx, args["input"].(models.CreateSegmentUseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSegmentUse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSegmentUse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSegmentUse(rctx, args["input"].(models.UpdateSegmentUseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSegmentUse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSegmentUse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSegmentUse(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeleteSegmentUse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeleteSegmentUse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeleteSegmentUse(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePort(rctx, args["input"].(models.CreatePortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkCreatePort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkCreatePort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkCreatePort(rctx, args["input"].(models.BulkCreatePortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPortᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePort(rctx, args["input"].(models.UpdatePortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePort(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkDeletePort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkDeletePort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkDeletePort(rctx, args["input"].(models.BulkIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPortᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_id(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_name(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_status(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_device(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Port().Device(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Port_note(ctx context.Context, field graphql.CollectedField, obj *models1.Port) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Port",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSite(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSites(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSites_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSites(rctx, args["input"].(models.SearchSiteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Site)
	fc.Result = res
	return ec.marshalNSite2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSiteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRack(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRacks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRacks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRacks(rctx, args["input"].(models.SearchRackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Rack)
	fc.Result = res
	return ec.marshalNRack2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevice(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDevices_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevices(rctx, args["input"].(models.SearchDeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDeviceModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDeviceModel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceModel(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDeviceModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDeviceModels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceModels(rctx, args["input"].(models.SearchDeviceModelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.DeviceModel)
	fc.Result = res
	return ec.marshalNDeviceModel2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHost(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHosts(rctx, args["input"].(models.SearchHostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Host)
	fc.Result = res
	return ec.marshalNHost2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHostOS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHostOS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHostOs(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHostOSes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHostOSes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHostOSes(rctx, args["input"].(models.SearchHostOSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.HostOS)
	fc.Result = res
	return ec.marshalNHostOS2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOSᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIpaddr(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIpaddr_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIpaddr(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Ipaddr)
	fc.Result = res
	return ec.marshalNIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIpaddrs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIpaddrs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIpaddrs(rctx, args["input"].(models.SearchIpaddrInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Ipaddr)
	fc.Result = res
	return ec.marshalNIpaddr2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddrᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIpSegment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIpSegment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIPSegment(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIpSegments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIpSegments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIPSegments(rctx, args["input"].(models.SearchIPSegmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.IpSegment)
	fc.Result = res
	return ec.marshalNIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVrf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVrf_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVrf(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVrfs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVrfs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVrfs(rctx, args["input"].(models.SearchVrfInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Vrf)
	fc.Result = res
	return ec.marshalNVrf2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrfᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSegmentUse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSegmentUse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSegmentUse(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSegmentUses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSegmentUses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSegmentUses(rctx, args["input"].(models.SearchSegmentUseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.SegmentUse)
	fc.Result = res
	return ec.marshalNSegmentUse2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPort(rctx, args["input"].(models.GetIDInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPorts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPorts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPorts(rctx, args["input"].(models.SearchPortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models1.Port)
	fc.Result = res
	return ec.marshalNPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPortᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_id(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_name(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_status(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_site(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Rack().Site(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models1.Site)
	fc.Result = res
	return ec.marshalOSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_devices(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Rack().Devices(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_units(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Rack_note(ctx context.Context, field graphql.CollectedField, obj *models1.Rack) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Rack",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_id(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_name(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_ipSegments(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SegmentUse().IPSegments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.IpSegment)
	fc.Result = res
	return ec.marshalOIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _SegmentUse_note(ctx context.Context, field graphql.CollectedField, obj *models1.SegmentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SegmentUse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_id(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_name(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_status(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_postalCode(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_address(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_note(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Site_racks(ctx context.Context, field graphql.CollectedField, obj *models1.Site) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Site",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Site().Racks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.Rack)
	fc.Result = res
	return ec.marshalORack2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_id(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models1.ID)
	fc.Result = res
	return ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_createdAt(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_name(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_ipSegments(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Vrf().IPSegments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models1.IpSegment)
	fc.Result = res
	return ec.marshalOIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, field.Selections, res)
}

func (ec *executionContext) _Vrf_note(ctx context.Context, field graphql.CollectedField, obj *models1.Vrf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Vrf",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBulkCreatePortInput(ctx context.Context, obj interface{}) (models.BulkCreatePortInput, error) {
	var it models.BulkCreatePortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "prefix":
			var err error
			it.Prefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startNum":
			var err error
			it.StartNum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "endNum":
			var err error
			it.EndNum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkIdInput(ctx context.Context, obj interface{}) (models.BulkIDInput, error) {
	var it models.BulkIDInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error
			it.Ids, err = ec.unmarshalNID2ᚕbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkUpdateDeviceInput(ctx context.Context, obj interface{}) (models.BulkUpdateDeviceInput, error) {
	var it models.BulkUpdateDeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "devices":
			var err error
			it.Devices, err = ec.unmarshalOUpdateDeviceInput2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDeviceInput(ctx context.Context, obj interface{}) (models.CreateDeviceInput, error) {
	var it models.CreateDeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error
			it.Position, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rackId":
			var err error
			it.RackID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceModelId":
			var err error
			it.DeviceModelID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostId":
			var err error
			it.HostID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDeviceModelInput(ctx context.Context, obj interface{}) (models.CreateDeviceModelInput, error) {
	var it models.CreateDeviceModelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error
			it.Height, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error
			it.Width, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateHostInput(ctx context.Context, obj interface{}) (models.CreateHostInput, error) {
	var it models.CreateHostInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceIds":
			var err error
			it.DeviceIds, err = ec.unmarshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "mgmtIpId":
			var err error
			it.MgmtIPID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostOSId":
			var err error
			it.HostOSId, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "protocol":
			var err error
			it.Protocol, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateHostOSInput(ctx context.Context, obj interface{}) (models.CreateHostOSInput, error) {
	var it models.CreateHostOSInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostIds":
			var err error
			it.HostIds, err = ec.unmarshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIpSegmentInput(ctx context.Context, obj interface{}) (models.CreateIPSegmentInput, error) {
	var it models.CreateIPSegmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ipSegment":
			var err error
			it.IPSegment, err = ec.unmarshalNIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx, v)
			if err != nil {
				return it, err
			}
		case "vrfId":
			var err error
			it.VrfID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "useId":
			var err error
			it.UseID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePortInput(ctx context.Context, obj interface{}) (models.CreatePortInput, error) {
	var it models.CreatePortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRackInput(ctx context.Context, obj interface{}) (models.CreateRackInput, error) {
	var it models.CreateRackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteId":
			var err error
			it.SiteID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "units":
			var err error
			it.Units, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSegmentUseInput(ctx context.Context, obj interface{}) (models.CreateSegmentUseInput, error) {
	var it models.CreateSegmentUseInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSiteInput(ctx context.Context, obj interface{}) (models.CreateSiteInput, error) {
	var it models.CreateSiteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalCode":
			var err error
			it.PostalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateVrfInput(ctx context.Context, obj interface{}) (models.CreateVrfInput, error) {
	var it models.CreateVrfInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetIdInput(ctx context.Context, obj interface{}) (models.GetIDInput, error) {
	var it models.GetIDInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchDeviceInput(ctx context.Context, obj interface{}) (models.SearchDeviceInput, error) {
	var it models.SearchDeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteId":
			var err error
			it.SiteID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "rackId":
			var err error
			it.RackID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceModelId":
			var err error
			it.DeviceModelID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostId":
			var err error
			it.HostID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostIdOr":
			var err error
			it.HostIDOr, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostIdIsNull":
			var err error
			it.HostIDIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "positionIsNull":
			var err error
			it.PositionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rackIdOrNull":
			var err error
			it.RackIDOrNull, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchDeviceModelInput(ctx context.Context, obj interface{}) (models.SearchDeviceModelInput, error) {
	var it models.SearchDeviceModelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchHostInput(ctx context.Context, obj interface{}) (models.SearchHostInput, error) {
	var it models.SearchHostInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostOSId":
			var err error
			it.HostOSId, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostOSIdOr":
			var err error
			it.HostOSIdOr, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostOSIsNull":
			var err error
			it.HostOSIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteId":
			var err error
			it.SiteID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "rackId":
			var err error
			it.RackID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchHostOSInput(ctx context.Context, obj interface{}) (models.SearchHostOSInput, error) {
	var it models.SearchHostOSInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchIpSegmentInput(ctx context.Context, obj interface{}) (models.SearchIPSegmentInput, error) {
	var it models.SearchIPSegmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ipSegment":
			var err error
			it.IPSegment, err = ec.unmarshalOIPSeg2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx, v)
			if err != nil {
				return it, err
			}
		case "vrfId":
			var err error
			it.VrfID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "useId":
			var err error
			it.UseID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchIpaddrInput(ctx context.Context, obj interface{}) (models.SearchIpaddrInput, error) {
	var it models.SearchIpaddrInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ip":
			var err error
			it.IP, err = ec.unmarshalOIP2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostId":
			var err error
			it.HostID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipSegmentId":
			var err error
			it.IPSegmentID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchPortInput(ctx context.Context, obj interface{}) (models.SearchPortInput, error) {
	var it models.SearchPortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchRackInput(ctx context.Context, obj interface{}) (models.SearchRackInput, error) {
	var it models.SearchRackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteName":
			var err error
			it.SiteName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteId":
			var err error
			it.SiteID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchSegmentUseInput(ctx context.Context, obj interface{}) (models.SearchSegmentUseInput, error) {
	var it models.SearchSegmentUseInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchSiteInput(ctx context.Context, obj interface{}) (models.SearchSiteInput, error) {
	var it models.SearchSiteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchVrfInput(ctx context.Context, obj interface{}) (models.SearchVrfInput, error) {
	var it models.SearchVrfInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDeviceInput(ctx context.Context, obj interface{}) (models.UpdateDeviceInput, error) {
	var it models.UpdateDeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error
			it.Position, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rackId":
			var err error
			it.RackID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceModelId":
			var err error
			it.DeviceModelID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostId":
			var err error
			it.HostID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDeviceModelInput(ctx context.Context, obj interface{}) (models.UpdateDeviceModelInput, error) {
	var it models.UpdateDeviceModelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error
			it.Height, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error
			it.Width, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateHostInput(ctx context.Context, obj interface{}) (models.UpdateHostInput, error) {
	var it models.UpdateHostInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceIds":
			var err error
			it.DeviceIds, err = ec.unmarshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "mgmtIpId":
			var err error
			it.MgmtIPID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostOSId":
			var err error
			it.HostOSId, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "protocol":
			var err error
			it.Protocol, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateHostOSInput(ctx context.Context, obj interface{}) (models.UpdateHostOSInput, error) {
	var it models.UpdateHostOSInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostIds":
			var err error
			it.HostIds, err = ec.unmarshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIpSegmentInput(ctx context.Context, obj interface{}) (models.UpdateIPSegmentInput, error) {
	var it models.UpdateIPSegmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "vrfId":
			var err error
			it.VrfID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "useId":
			var err error
			it.UseID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIpaddrInput(ctx context.Context, obj interface{}) (models.UpdateIpaddrInput, error) {
	var it models.UpdateIpaddrInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePortInput(ctx context.Context, obj interface{}) (models.UpdatePortInput, error) {
	var it models.UpdatePortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRackInput(ctx context.Context, obj interface{}) (models.UpdateRackInput, error) {
	var it models.UpdateRackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "siteId":
			var err error
			it.SiteID, err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "units":
			var err error
			it.Units, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSegmentUseInput(ctx context.Context, obj interface{}) (models.UpdateSegmentUseInput, error) {
	var it models.UpdateSegmentUseInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSiteInput(ctx context.Context, obj interface{}) (models.UpdateSiteInput, error) {
	var it models.UpdateSiteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalCode":
			var err error
			it.PostalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateVrfInput(ctx context.Context, obj interface{}) (models.UpdateVrfInput, error) {
	var it models.UpdateVrfInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var deviceImplementors = []string{"Device"}

func (ec *executionContext) _Device(ctx context.Context, sel ast.SelectionSet, obj *models1.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Device")
		case "id":
			out.Values[i] = ec._Device_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Device_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Device_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Device_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Device_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Device_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "position":
			out.Values[i] = ec._Device_position(ctx, field, obj)
		case "rack":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Device_rack(ctx, field, obj)
				return res
			})
		case "deviceModel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Device_deviceModel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "host":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Device_host(ctx, field, obj)
				return res
			})
		case "ports":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Device_ports(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._Device_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceModelImplementors = []string{"DeviceModel"}

func (ec *executionContext) _DeviceModel(ctx context.Context, sel ast.SelectionSet, obj *models1.DeviceModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceModelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceModel")
		case "id":
			out.Values[i] = ec._DeviceModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._DeviceModel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._DeviceModel_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._DeviceModel_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceModel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "height":
			out.Values[i] = ec._DeviceModel_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "width":
			out.Values[i] = ec._DeviceModel_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "devices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeviceModel_devices(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._DeviceModel_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hostImplementors = []string{"Host"}

func (ec *executionContext) _Host(ctx context.Context, sel ast.SelectionSet, obj *models1.Host) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Host")
		case "id":
			out.Values[i] = ec._Host_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Host_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Host_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Host_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Host_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Host_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "devices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Host_devices(ctx, field, obj)
				return res
			})
		case "mgmtIp":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Host_mgmtIp(ctx, field, obj)
				return res
			})
		case "hostOS":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Host_hostOS(ctx, field, obj)
				return res
			})
		case "protocol":
			out.Values[i] = ec._Host_protocol(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Host_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hostOSImplementors = []string{"HostOS"}

func (ec *executionContext) _HostOS(ctx context.Context, sel ast.SelectionSet, obj *models1.HostOS) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostOSImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostOS")
		case "id":
			out.Values[i] = ec._HostOS_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._HostOS_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._HostOS_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._HostOS_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._HostOS_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hosts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HostOS_hosts(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._HostOS_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ipSegmentImplementors = []string{"IpSegment"}

func (ec *executionContext) _IpSegment(ctx context.Context, sel ast.SelectionSet, obj *models1.IpSegment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ipSegmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IpSegment")
		case "id":
			out.Values[i] = ec._IpSegment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._IpSegment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._IpSegment_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._IpSegment_deletedAt(ctx, field, obj)
		case "ipSegment":
			out.Values[i] = ec._IpSegment_ipSegment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "vrf":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IpSegment_vrf(ctx, field, obj)
				return res
			})
		case "ipaddrs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IpSegment_ipaddrs(ctx, field, obj)
				return res
			})
		case "use":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IpSegment_use(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._IpSegment_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ipaddrImplementors = []string{"Ipaddr"}

func (ec *executionContext) _Ipaddr(ctx context.Context, sel ast.SelectionSet, obj *models1.Ipaddr) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ipaddrImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ipaddr")
		case "id":
			out.Values[i] = ec._Ipaddr_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Ipaddr_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Ipaddr_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Ipaddr_deletedAt(ctx, field, obj)
		case "ip":
			out.Values[i] = ec._Ipaddr_ip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Ipaddr_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Ipaddr_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "host":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ipaddr_host(ctx, field, obj)
				return res
			})
		case "ipSegment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ipaddr_ipSegment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "note":
			out.Values[i] = ec._Ipaddr_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createSite":
			out.Values[i] = ec._Mutation_createSite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSite":
			out.Values[i] = ec._Mutation_updateSite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSite":
			out.Values[i] = ec._Mutation_deleteSite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteSite":
			out.Values[i] = ec._Mutation_bulkDeleteSite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRack":
			out.Values[i] = ec._Mutation_createRack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRack":
			out.Values[i] = ec._Mutation_updateRack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRack":
			out.Values[i] = ec._Mutation_deleteRack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteRack":
			out.Values[i] = ec._Mutation_bulkDeleteRack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDevice":
			out.Values[i] = ec._Mutation_createDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDevice":
			out.Values[i] = ec._Mutation_updateDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkUpdateDevice":
			out.Values[i] = ec._Mutation_bulkUpdateDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDevice":
			out.Values[i] = ec._Mutation_deleteDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteDevice":
			out.Values[i] = ec._Mutation_bulkDeleteDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDeviceModel":
			out.Values[i] = ec._Mutation_createDeviceModel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDeviceModel":
			out.Values[i] = ec._Mutation_updateDeviceModel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDeviceModel":
			out.Values[i] = ec._Mutation_deleteDeviceModel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteDeviceModel":
			out.Values[i] = ec._Mutation_bulkDeleteDeviceModel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createHost":
			out.Values[i] = ec._Mutation_createHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateHost":
			out.Values[i] = ec._Mutation_updateHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteHost":
			out.Values[i] = ec._Mutation_deleteHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteHost":
			out.Values[i] = ec._Mutation_bulkDeleteHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createHostOS":
			out.Values[i] = ec._Mutation_createHostOS(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateHostOS":
			out.Values[i] = ec._Mutation_updateHostOS(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteHostOS":
			out.Values[i] = ec._Mutation_deleteHostOS(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteHostOS":
			out.Values[i] = ec._Mutation_bulkDeleteHostOS(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIpaddr":
			out.Values[i] = ec._Mutation_updateIpaddr(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIpSegment":
			out.Values[i] = ec._Mutation_createIpSegment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIpSegment":
			out.Values[i] = ec._Mutation_updateIpSegment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIpSegment":
			out.Values[i] = ec._Mutation_deleteIpSegment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteIpSegment":
			out.Values[i] = ec._Mutation_bulkDeleteIpSegment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createVrf":
			out.Values[i] = ec._Mutation_createVrf(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVrf":
			out.Values[i] = ec._Mutation_updateVrf(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVrf":
			out.Values[i] = ec._Mutation_deleteVrf(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteVrf":
			out.Values[i] = ec._Mutation_bulkDeleteVrf(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSegmentUse":
			out.Values[i] = ec._Mutation_createSegmentUse(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSegmentUse":
			out.Values[i] = ec._Mutation_updateSegmentUse(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSegmentUse":
			out.Values[i] = ec._Mutation_deleteSegmentUse(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeleteSegmentUse":
			out.Values[i] = ec._Mutation_bulkDeleteSegmentUse(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPort":
			out.Values[i] = ec._Mutation_createPort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkCreatePort":
			out.Values[i] = ec._Mutation_bulkCreatePort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePort":
			out.Values[i] = ec._Mutation_updatePort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePort":
			out.Values[i] = ec._Mutation_deletePort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkDeletePort":
			out.Values[i] = ec._Mutation_bulkDeletePort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var portImplementors = []string{"Port"}

func (ec *executionContext) _Port(ctx context.Context, sel ast.SelectionSet, obj *models1.Port) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, portImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Port")
		case "id":
			out.Values[i] = ec._Port_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Port_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Port_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Port_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Port_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Port_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "device":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Port_device(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "note":
			out.Values[i] = ec._Port_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getSite":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSite(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSites":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSites(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRack":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRack(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRacks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRacks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDevice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDevices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDeviceModel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceModel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDeviceModels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceModels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getHost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHost(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getHosts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHosts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getHostOS":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHostOS(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getHostOSes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHostOSes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIpaddr":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIpaddr(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIpaddrs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIpaddrs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIpSegment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIpSegment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIpSegments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIpSegments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVrf":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVrf(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVrfs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVrfs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSegmentUse":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSegmentUse(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSegmentUses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSegmentUses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPort":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPort(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPorts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPorts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rackImplementors = []string{"Rack"}

func (ec *executionContext) _Rack(ctx context.Context, sel ast.SelectionSet, obj *models1.Rack) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rackImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Rack")
		case "id":
			out.Values[i] = ec._Rack_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Rack_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Rack_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Rack_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Rack_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Rack_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "site":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rack_site(ctx, field, obj)
				return res
			})
		case "devices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rack_devices(ctx, field, obj)
				return res
			})
		case "units":
			out.Values[i] = ec._Rack_units(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._Rack_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var segmentUseImplementors = []string{"SegmentUse"}

func (ec *executionContext) _SegmentUse(ctx context.Context, sel ast.SelectionSet, obj *models1.SegmentUse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, segmentUseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SegmentUse")
		case "id":
			out.Values[i] = ec._SegmentUse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SegmentUse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._SegmentUse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._SegmentUse_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SegmentUse_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ipSegments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SegmentUse_ipSegments(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._SegmentUse_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var siteImplementors = []string{"Site"}

func (ec *executionContext) _Site(ctx context.Context, sel ast.SelectionSet, obj *models1.Site) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, siteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Site")
		case "id":
			out.Values[i] = ec._Site_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Site_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Site_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Site_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Site_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Site_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "postalCode":
			out.Values[i] = ec._Site_postalCode(ctx, field, obj)
		case "phoneNumber":
			out.Values[i] = ec._Site_phoneNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Site_address(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Site_note(ctx, field, obj)
		case "racks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Site_racks(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vrfImplementors = []string{"Vrf"}

func (ec *executionContext) _Vrf(ctx context.Context, sel ast.SelectionSet, obj *models1.Vrf) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vrfImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vrf")
		case "id":
			out.Values[i] = ec._Vrf_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Vrf_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Vrf_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Vrf_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Vrf_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ipSegments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vrf_ipSegments(ctx, field, obj)
				return res
			})
		case "note":
			out.Values[i] = ec._Vrf_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBulkCreatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkCreatePortInput(ctx context.Context, v interface{}) (models.BulkCreatePortInput, error) {
	return ec.unmarshalInputBulkCreatePortInput(ctx, v)
}

func (ec *executionContext) unmarshalNBulkIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkIDInput(ctx context.Context, v interface{}) (models.BulkIDInput, error) {
	return ec.unmarshalInputBulkIdInput(ctx, v)
}

func (ec *executionContext) unmarshalNBulkUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐBulkUpdateDeviceInput(ctx context.Context, v interface{}) (models.BulkUpdateDeviceInput, error) {
	return ec.unmarshalInputBulkUpdateDeviceInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateDeviceInput(ctx context.Context, v interface{}) (models.CreateDeviceInput, error) {
	return ec.unmarshalInputCreateDeviceInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateDeviceModelInput(ctx context.Context, v interface{}) (models.CreateDeviceModelInput, error) {
	return ec.unmarshalInputCreateDeviceModelInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateHostInput(ctx context.Context, v interface{}) (models.CreateHostInput, error) {
	return ec.unmarshalInputCreateHostInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateHostOSInput(ctx context.Context, v interface{}) (models.CreateHostOSInput, error) {
	return ec.unmarshalInputCreateHostOSInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateIPSegmentInput(ctx context.Context, v interface{}) (models.CreateIPSegmentInput, error) {
	return ec.unmarshalInputCreateIpSegmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreatePortInput(ctx context.Context, v interface{}) (models.CreatePortInput, error) {
	return ec.unmarshalInputCreatePortInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateRackInput(ctx context.Context, v interface{}) (models.CreateRackInput, error) {
	return ec.unmarshalInputCreateRackInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateSegmentUseInput(ctx context.Context, v interface{}) (models.CreateSegmentUseInput, error) {
	return ec.unmarshalInputCreateSegmentUseInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateSiteInput(ctx context.Context, v interface{}) (models.CreateSiteInput, error) {
	return ec.unmarshalInputCreateSiteInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐCreateVrfInput(ctx context.Context, v interface{}) (models.CreateVrfInput, error) {
	return ec.unmarshalInputCreateVrfInput(ctx, v)
}

func (ec *executionContext) marshalNDevice2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx context.Context, sel ast.SelectionSet, v models1.Device) graphql.Marshaler {
	return ec._Device(ctx, sel, &v)
}

func (ec *executionContext) marshalNDevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Device) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx context.Context, sel ast.SelectionSet, v *models1.Device) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalNDeviceModel2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx context.Context, sel ast.SelectionSet, v models1.DeviceModel) graphql.Marshaler {
	return ec._DeviceModel(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeviceModel2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.DeviceModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeviceModel2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDeviceModel(ctx context.Context, sel ast.SelectionSet, v *models1.DeviceModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeviceModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetIdInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐGetIDInput(ctx context.Context, v interface{}) (models.GetIDInput, error) {
	return ec.unmarshalInputGetIdInput(ctx, v)
}

func (ec *executionContext) marshalNHost2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx context.Context, sel ast.SelectionSet, v models1.Host) graphql.Marshaler {
	return ec._Host(ctx, sel, &v)
}

func (ec *executionContext) marshalNHost2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Host) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx context.Context, sel ast.SelectionSet, v *models1.Host) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Host(ctx, sel, v)
}

func (ec *executionContext) marshalNHostOS2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx context.Context, sel ast.SelectionSet, v models1.HostOS) graphql.Marshaler {
	return ec._HostOS(ctx, sel, &v)
}

func (ec *executionContext) marshalNHostOS2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOSᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.HostOS) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx context.Context, sel ast.SelectionSet, v *models1.HostOS) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HostOS(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, v interface{}) (models1.ID, error) {
	var res models1.ID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, sel ast.SelectionSet, v models1.ID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2ᚕbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIDᚄ(ctx context.Context, v interface{}) ([]models1.ID, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models1.ID, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIDᚄ(ctx context.Context, sel ast.SelectionSet, v []models1.ID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, v interface{}) (models1.IP, error) {
	var res models1.IP
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, sel ast.SelectionSet, v models1.IP) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, v interface{}) (models1.IPSeg, error) {
	var res models1.IPSeg
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, sel ast.SelectionSet, v models1.IPSeg) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIpSegment2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx context.Context, sel ast.SelectionSet, v models1.IpSegment) graphql.Marshaler {
	return ec._IpSegment(ctx, sel, &v)
}

func (ec *executionContext) marshalNIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.IpSegment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx context.Context, sel ast.SelectionSet, v *models1.IpSegment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IpSegment(ctx, sel, v)
}

func (ec *executionContext) marshalNIpaddr2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx context.Context, sel ast.SelectionSet, v models1.Ipaddr) graphql.Marshaler {
	return ec._Ipaddr(ctx, sel, &v)
}

func (ec *executionContext) marshalNIpaddr2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddrᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Ipaddr) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx context.Context, sel ast.SelectionSet, v *models1.Ipaddr) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Ipaddr(ctx, sel, v)
}

func (ec *executionContext) marshalNPort2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx context.Context, sel ast.SelectionSet, v models1.Port) graphql.Marshaler {
	return ec._Port(ctx, sel, &v)
}

func (ec *executionContext) marshalNPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPortᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Port) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx context.Context, sel ast.SelectionSet, v *models1.Port) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Port(ctx, sel, v)
}

func (ec *executionContext) marshalNRack2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx context.Context, sel ast.SelectionSet, v models1.Rack) graphql.Marshaler {
	return ec._Rack(ctx, sel, &v)
}

func (ec *executionContext) marshalNRack2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRackᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Rack) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx context.Context, sel ast.SelectionSet, v *models1.Rack) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Rack(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSearchDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchDeviceInput(ctx context.Context, v interface{}) (models.SearchDeviceInput, error) {
	return ec.unmarshalInputSearchDeviceInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchDeviceModelInput(ctx context.Context, v interface{}) (models.SearchDeviceModelInput, error) {
	return ec.unmarshalInputSearchDeviceModelInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchHostInput(ctx context.Context, v interface{}) (models.SearchHostInput, error) {
	return ec.unmarshalInputSearchHostInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchHostOSInput(ctx context.Context, v interface{}) (models.SearchHostOSInput, error) {
	return ec.unmarshalInputSearchHostOSInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchIPSegmentInput(ctx context.Context, v interface{}) (models.SearchIPSegmentInput, error) {
	return ec.unmarshalInputSearchIpSegmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchIpaddrInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchIpaddrInput(ctx context.Context, v interface{}) (models.SearchIpaddrInput, error) {
	return ec.unmarshalInputSearchIpaddrInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchPortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchPortInput(ctx context.Context, v interface{}) (models.SearchPortInput, error) {
	return ec.unmarshalInputSearchPortInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchRackInput(ctx context.Context, v interface{}) (models.SearchRackInput, error) {
	return ec.unmarshalInputSearchRackInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchSegmentUseInput(ctx context.Context, v interface{}) (models.SearchSegmentUseInput, error) {
	return ec.unmarshalInputSearchSegmentUseInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchSiteInput(ctx context.Context, v interface{}) (models.SearchSiteInput, error) {
	return ec.unmarshalInputSearchSiteInput(ctx, v)
}

func (ec *executionContext) unmarshalNSearchVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐSearchVrfInput(ctx context.Context, v interface{}) (models.SearchVrfInput, error) {
	return ec.unmarshalInputSearchVrfInput(ctx, v)
}

func (ec *executionContext) marshalNSegmentUse2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx context.Context, sel ast.SelectionSet, v models1.SegmentUse) graphql.Marshaler {
	return ec._SegmentUse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSegmentUse2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUseᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.SegmentUse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx context.Context, sel ast.SelectionSet, v *models1.SegmentUse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SegmentUse(ctx, sel, v)
}

func (ec *executionContext) marshalNSite2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx context.Context, sel ast.SelectionSet, v models1.Site) graphql.Marshaler {
	return ec._Site(ctx, sel, &v)
}

func (ec *executionContext) marshalNSite2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSiteᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Site) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx context.Context, sel ast.SelectionSet, v *models1.Site) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Site(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx context.Context, v interface{}) (models.UpdateDeviceInput, error) {
	return ec.unmarshalInputUpdateDeviceInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateDeviceModelInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceModelInput(ctx context.Context, v interface{}) (models.UpdateDeviceModelInput, error) {
	return ec.unmarshalInputUpdateDeviceModelInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateHostInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateHostInput(ctx context.Context, v interface{}) (models.UpdateHostInput, error) {
	return ec.unmarshalInputUpdateHostInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateHostOSInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateHostOSInput(ctx context.Context, v interface{}) (models.UpdateHostOSInput, error) {
	return ec.unmarshalInputUpdateHostOSInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIpSegmentInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateIPSegmentInput(ctx context.Context, v interface{}) (models.UpdateIPSegmentInput, error) {
	return ec.unmarshalInputUpdateIpSegmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIpaddrInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateIpaddrInput(ctx context.Context, v interface{}) (models.UpdateIpaddrInput, error) {
	return ec.unmarshalInputUpdateIpaddrInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePortInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdatePortInput(ctx context.Context, v interface{}) (models.UpdatePortInput, error) {
	return ec.unmarshalInputUpdatePortInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateRackInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateRackInput(ctx context.Context, v interface{}) (models.UpdateRackInput, error) {
	return ec.unmarshalInputUpdateRackInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateSegmentUseInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateSegmentUseInput(ctx context.Context, v interface{}) (models.UpdateSegmentUseInput, error) {
	return ec.unmarshalInputUpdateSegmentUseInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateSiteInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateSiteInput(ctx context.Context, v interface{}) (models.UpdateSiteInput, error) {
	return ec.unmarshalInputUpdateSiteInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateVrfInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateVrfInput(ctx context.Context, v interface{}) (models.UpdateVrfInput, error) {
	return ec.unmarshalInputUpdateVrfInput(ctx, v)
}

func (ec *executionContext) marshalNVrf2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx context.Context, sel ast.SelectionSet, v models1.Vrf) graphql.Marshaler {
	return ec._Vrf(ctx, sel, &v)
}

func (ec *executionContext) marshalNVrf2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrfᚄ(ctx context.Context, sel ast.SelectionSet, v []*models1.Vrf) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx context.Context, sel ast.SelectionSet, v *models1.Vrf) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Vrf(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalODevice2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx context.Context, sel ast.SelectionSet, v models1.Device) graphql.Marshaler {
	return ec._Device(ctx, sel, &v)
}

func (ec *executionContext) marshalODevice2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx context.Context, sel ast.SelectionSet, v []*models1.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODevice2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐDevice(ctx context.Context, sel ast.SelectionSet, v *models1.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalOHost2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx context.Context, sel ast.SelectionSet, v models1.Host) graphql.Marshaler {
	return ec._Host(ctx, sel, &v)
}

func (ec *executionContext) marshalOHost2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx context.Context, sel ast.SelectionSet, v []*models1.Host) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHost2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHost(ctx context.Context, sel ast.SelectionSet, v *models1.Host) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Host(ctx, sel, v)
}

func (ec *executionContext) marshalOHostOS2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx context.Context, sel ast.SelectionSet, v models1.HostOS) graphql.Marshaler {
	return ec._HostOS(ctx, sel, &v)
}

func (ec *executionContext) marshalOHostOS2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐHostOS(ctx context.Context, sel ast.SelectionSet, v *models1.HostOS) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HostOS(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, v interface{}) (models1.ID, error) {
	var res models1.ID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, sel ast.SelectionSet, v models1.ID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, v interface{}) ([]*models1.ID, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models1.ID, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, sel ast.SelectionSet, v []*models1.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, v interface{}) (*models1.ID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐID(ctx context.Context, sel ast.SelectionSet, v *models1.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, v interface{}) (models1.IP, error) {
	var res models1.IP
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, sel ast.SelectionSet, v models1.IP) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOIP2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, v interface{}) (*models1.IP, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIP2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIP2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIP(ctx context.Context, sel ast.SelectionSet, v *models1.IP) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, v interface{}) (models1.IPSeg, error) {
	var res models1.IPSeg
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, sel ast.SelectionSet, v models1.IPSeg) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOIPSeg2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, v interface{}) (*models1.IPSeg, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIPSeg2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIPSeg2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIPSeg(ctx context.Context, sel ast.SelectionSet, v *models1.IPSeg) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalOIpSegment2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx context.Context, sel ast.SelectionSet, v models1.IpSegment) graphql.Marshaler {
	return ec._IpSegment(ctx, sel, &v)
}

func (ec *executionContext) marshalOIpSegment2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx context.Context, sel ast.SelectionSet, v []*models1.IpSegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIpSegment2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpSegment(ctx context.Context, sel ast.SelectionSet, v *models1.IpSegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IpSegment(ctx, sel, v)
}

func (ec *executionContext) marshalOIpaddr2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx context.Context, sel ast.SelectionSet, v models1.Ipaddr) graphql.Marshaler {
	return ec._Ipaddr(ctx, sel, &v)
}

func (ec *executionContext) marshalOIpaddr2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx context.Context, sel ast.SelectionSet, v []*models1.Ipaddr) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIpaddr2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐIpaddr(ctx context.Context, sel ast.SelectionSet, v *models1.Ipaddr) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ipaddr(ctx, sel, v)
}

func (ec *executionContext) marshalOPort2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx context.Context, sel ast.SelectionSet, v models1.Port) graphql.Marshaler {
	return ec._Port(ctx, sel, &v)
}

func (ec *executionContext) marshalOPort2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx context.Context, sel ast.SelectionSet, v []*models1.Port) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPort2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐPort(ctx context.Context, sel ast.SelectionSet, v *models1.Port) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Port(ctx, sel, v)
}

func (ec *executionContext) marshalORack2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx context.Context, sel ast.SelectionSet, v models1.Rack) graphql.Marshaler {
	return ec._Rack(ctx, sel, &v)
}

func (ec *executionContext) marshalORack2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx context.Context, sel ast.SelectionSet, v []*models1.Rack) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORack2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐRack(ctx context.Context, sel ast.SelectionSet, v *models1.Rack) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Rack(ctx, sel, v)
}

func (ec *executionContext) marshalOSegmentUse2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx context.Context, sel ast.SelectionSet, v models1.SegmentUse) graphql.Marshaler {
	return ec._SegmentUse(ctx, sel, &v)
}

func (ec *executionContext) marshalOSegmentUse2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSegmentUse(ctx context.Context, sel ast.SelectionSet, v *models1.SegmentUse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SegmentUse(ctx, sel, v)
}

func (ec *executionContext) marshalOSite2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx context.Context, sel ast.SelectionSet, v models1.Site) graphql.Marshaler {
	return ec._Site(ctx, sel, &v)
}

func (ec *executionContext) marshalOSite2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐSite(ctx context.Context, sel ast.SelectionSet, v *models1.Site) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Site(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOTime2timeᚐTime(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx context.Context, v interface{}) (models.UpdateDeviceInput, error) {
	return ec.unmarshalInputUpdateDeviceInput(ctx, v)
}

func (ec *executionContext) unmarshalOUpdateDeviceInput2ᚕᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx context.Context, v interface{}) ([]*models.UpdateDeviceInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.UpdateDeviceInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOUpdateDeviceInput2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUpdateDeviceInput2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx context.Context, v interface{}) (*models.UpdateDeviceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUpdateDeviceInput2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚋgeneratedᚐUpdateDeviceInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOVrf2bitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx context.Context, sel ast.SelectionSet, v models1.Vrf) graphql.Marshaler {
	return ec._Vrf(ctx, sel, &v)
}

func (ec *executionContext) marshalOVrf2ᚖbitbucketᚗorgᚋnetlabiᚋnetlabiᚋmodelsᚐVrf(ctx context.Context, sel ast.SelectionSet, v *models1.Vrf) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vrf(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
