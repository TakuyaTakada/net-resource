package resolver

import (
	"github.com/taktakty/netlabi/cmd"
	"github.com/taktakty/netlabi/graph/generated"
	genGraph "github.com/taktakty/netlabi/graph/generated"
	"github.com/jinzhu/gorm"
)

var db = cmd.GetInstance()

// GetDB get db from another package
func GetDB() *gorm.DB {
	return db
}

// CloseDB close db for safe
func CloseDB() {
	db.Close()
}

// Resolver generated by gqlgen
type Resolver struct{}

// Mutation generated by gqlgen
func (r *Resolver) Mutation() genGraph.MutationResolver {
	return &mutationResolver{r}
}

// Query generated by gqlgen
func (r *Resolver) Query() genGraph.QueryResolver {
	return &queryResolver{r}
}

// Rack generated by gqlgen
func (r *Resolver) Rack() generated.RackResolver {
	return &rackResolver{r}
}

// Site generated by gqlgen
func (r *Resolver) Site() generated.SiteResolver {
	return &siteResolver{r}
}

// Device generated by gqlgen
func (r *Resolver) Device() generated.DeviceResolver {
	return &deviceResolver{r}
}

// DeviceModel generated by gqlgen
func (r *Resolver) DeviceModel() generated.DeviceModelResolver {
	return &deviceModelResolver{r}
}

// Host generated by gqlgen
func (r *Resolver) Host() generated.HostResolver {
	return &hostResolver{r}
}

// HostOS generated by gqlgen
func (r *Resolver) HostOS() generated.HostOSResolver {
	return &hostOSResolver{r}
}

// IpSegment generated by gqlgen golint:ignore
func (r *Resolver) IpSegment() generated.IpSegmentResolver {
	return &ipSegmentResolver{r}
}

// Ipaddr generated by gqlgen
func (r *Resolver) Ipaddr() generated.IpaddrResolver {
	return &ipaddrResolver{r}
}

func (r *Resolver) Vrf() generated.VrfResolver {
	return &vrfResolver{r}
}

func (r *Resolver) SegmentUse() generated.SegmentUseResolver {
	return &segmentUseResolver{r}
}

func (r *Resolver) Port() generated.PortResolver {
	return &portResolver{r}
}

type mutationResolver struct{ *Resolver }

type queryResolver struct{ *Resolver }
